{"version":3,"file":"static/js/692.26105485.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/assets/formControls/formsControls.module.css?17fe","assets/formControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/сomponents/messages/Messages.module.css?48e6","сomponents/messages/messagesItems/UserItem.tsx","сomponents/messages/messagesItems/DialogItem.tsx","сomponents/messages/Messages.tsx","HOC/withAuthRedirect.tsx","сomponents/messages/MessagesContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"inputContainer\":\"formsControls_inputContainer__ae7bv\",\"input\":\"formsControls_input__dLJRg\",\"formControlErrorSpan\":\"formsControls_formControlErrorSpan__ZM2Le\",\"formControlError\":\"formsControls_formControlError__DbjlN\"};","import React from 'react';\nimport s from './formsControls.module.css';\nimport {Field} from \"redux-form\";\n\ntype FormControlPropsType = {\n    meta: {\n        touched: boolean;\n        error: string | undefined;\n    }\n    children: React.ReactNode;\n}\n\ntype TextareaPropsType = {\n    meta: {\n        touched: boolean;\n        error: string | undefined;\n    }\n    input: {\n        name: string;\n        value: string;\n        onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n    }\n}\n\ntype InputPropsType = {\n    input: {\n        name: string;\n        value: string;\n        onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    }\n    meta: {\n        touched: boolean;\n        error: string | undefined;\n    }\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({children, meta: {touched, error}}) => {\n\n    const hasError = touched && error\n    return (\n        <div className={s.inputContainer}>\n            {children}\n            {hasError && <span className={s.formControlErrorSpan}>{error}</span>}\n        </div>\n    );\n\n}\n\nexport const Textarea: React.FC<TextareaPropsType> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return (\n        <FormControl meta={meta}>\n            <textarea\n                className={`${meta.touched && meta.error} ? ${s.formControlError} : ''`} {...input} {...restProps} />\n        </FormControl>\n    );\n};\n\nexport const Input: React.FC<InputPropsType> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return (\n        <FormControl meta={meta}>\n            <input\n                className={`${meta.touched && meta.error ? `${s.formControlError} ${s.input}` : s.input}`} {...input} {...restProps} />\n        </FormControl>\n    );\n};\n\nexport const createField = (placeholder: string | null, validate: any[], name: string, component: any, type: string, id?: string, className?: any) => (\n    <Field placeholder={placeholder}\n           validate={validate}\n           name={name}\n           component={component}\n           type={type}\n           id={id}\n           className={className}\n    />)\n\n","export const requiredField = (value: string | undefined) => {\n    if(value) return undefined;\n    return \"Field is required\"\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string | undefined) => {\n    if(value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Messages_dialogs__ItULn\",\"users\":\"Messages_users__H3+rG\",\"item\":\"Messages_item__1gE0r\"};","import React from 'react';\nimport s from \"../Messages.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\ntype UserPropsType = {\n    name: string,\n    id: string\n\n}\nconst UserItem: React.FC<UserPropsType> = (props) => {\n\n    const {name, id} = props\n\n    const PATH = \"/messages/\" + id\n\n    return (\n            <NavLink\n                className={s.item}\n                to={PATH}\n            >\n                {name}\n            </NavLink>\n    );\n};\n\nexport default UserItem;","import React from 'react';\n\ntype MessagePropsType = {\n    message: string,\n\n}\nconst DialogItem: React.FC<MessagePropsType> = ({message}) => {\n\n    return (\n        <div>\n            <div>{message}</div>\n        </div>\n    );\n};\n\nexport default DialogItem;","import React from 'react';\nimport s from './Messages.module.css';\nimport UserItem from \"./messagesItems/UserItem\";\nimport DialogItem from \"./messagesItems/DialogItem\";\nimport {MessagesPropsType} from \"./MessagesContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../assets/formControls/FormsControls\";\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\n\nconst Messages:React.FC<MessagesPropsType> = (props) => {\n\n    const {usersData, dialogsData, sendMessage} = props\n\n    const usersElements = usersData.map((e) => <UserItem key={e.id} name={e.name} id={e.id}/>)\n\n    const dialogsElements = dialogsData.map((e) => <DialogItem key={e.id} message={e.message}/>)\n\n    const addNewMessage = (values: { newMessageBody: string }) => {\n        sendMessage(values.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.users}>\n                {usersElements}\n            </div>\n\n            <div className={s.messages}>\n                {dialogsElements}\n            </div>\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\n        </div>\n    );\n};\n\ntype FormDataType = {\n    newMessageBody: string\n}\n\nconst maxLength300 = maxLengthCreator(300)\n\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field component={Textarea}\n                   validate={[requiredField, maxLength300]}\n                   name={'newMessageBody'}\n                   placeholder={'Please, enter your message'}/>\n            <button>send</button>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm<FormDataType>( {form: \"dialogAddMessageForm\"} )(AddMessageForm)\n\nexport default Messages;","import {Navigate} from \"react-router-dom\";\nimport React, {ComponentType} from \"react\";\nimport {connect} from \"react-redux\";\nimport {AppRootStateType} from \"../Redux/redux-store\";\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: MapStatePropsType) => {\n        const {isAuth, ...restProps} = props\n        if (!isAuth) return <Navigate to={'/login'}/>\n\n        return <Component {...restProps as T}/>\n    }\n    return connect(mapStateToProps)(RedirectComponent)\n}","import React from 'react';\nimport Messages from \"./Messages\";\nimport {InitialStateType, sendMessageAC} from \"../../Redux/messagesPage-reducer\";\nimport {connect} from \"react-redux\";\nimport {AppRootStateType} from \"../../Redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\n\ntype MapDispatchPropsType = {\n    sendMessage: (valueMessageText: string) => void\n}\n\nexport type MessagesPropsType = InitialStateType & MapDispatchPropsType\n\nconst mapStateToProps = (state: AppRootStateType): InitialStateType => {\n    return {\n        dialogsData: state.messagesPage.dialogsData,\n        usersData: state.messagesPage.usersData,\n        valueMessageText: state.messagesPage.valueMessageText,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        sendMessage: (newMessageBody: string) => {\n            dispatch(sendMessageAC(newMessageBody))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Messages);\n"],"names":["FormControl","children","meta","touched","error","hasError","className","s","Textarea","props","input","restProps","Input","createField","placeholder","validate","name","component","type","id","Field","requiredField","value","maxLengthCreator","maxLength","length","PATH","to","message","maxLength300","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","usersData","dialogsData","sendMessage","usersElements","map","e","dialogsElements","values","newMessageBody","mapStateToProps","state","isAuth","auth","compose","connect","messagesPage","valueMessageText","dispatch","sendMessageAC","Component","Messages"],"sourceRoot":""}