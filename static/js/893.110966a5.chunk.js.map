{"version":3,"file":"static/js/893.110966a5.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/assets/formControls/formsControls.module.css?17fe","assets/formControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/сomponents/profile/Profile.module.css?b591","webpack://samurai-way/./src/сomponents/profile/profileInfo/ProfileInfo.module.css?b326","сomponents/profile/profileInfo/ProfileStatus.tsx","сomponents/profile/profileInfo/ProfileInfo.tsx","сomponents/profile/myPosts/post/Post.tsx","webpack://samurai-way/./src/сomponents/profile/myPosts/MyPosts.module.css?78fd","сomponents/profile/myPosts/MyPosts.tsx","сomponents/profile/myPosts/MyPostsContainer.tsx","сomponents/profile/Profile.tsx","сomponents/profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"inputContainer\":\"formsControls_inputContainer__ae7bv\",\"input\":\"formsControls_input__dLJRg\",\"formControlErrorSpan\":\"formsControls_formControlErrorSpan__ZM2Le\",\"formControlError\":\"formsControls_formControlError__DbjlN\"};","import React from 'react';\nimport s from './formsControls.module.css';\nimport {Field} from \"redux-form\";\n\ntype FormControlPropsType = {\n    meta: {\n        touched: boolean;\n        error: string | undefined;\n    }\n    children: React.ReactNode;\n}\n\ntype TextareaPropsType = {\n    meta: {\n        touched: boolean;\n        error: string | undefined;\n    }\n    input: {\n        name: string;\n        value: string;\n        onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n    }\n}\n\ntype InputPropsType = {\n    input: {\n        name: string;\n        value: string;\n        onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    }\n    meta: {\n        touched: boolean;\n        error: string | undefined;\n    }\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({children, meta: {touched, error}}) => {\n\n    const hasError = touched && error\n    return (\n        <div className={s.inputContainer}>\n            {children}\n            {hasError && <span className={s.formControlErrorSpan}>{error}</span>}\n        </div>\n    );\n\n}\n\nexport const Textarea: React.FC<TextareaPropsType> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return (\n        <FormControl meta={meta}>\n            <textarea\n                className={`${meta.touched && meta.error} ? ${s.formControlError} : ''`} {...input} {...restProps} />\n        </FormControl>\n    );\n};\n\nexport const Input: React.FC<InputPropsType> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return (\n        <FormControl meta={meta}>\n            <input\n                className={`${meta.touched && meta.error ? `${s.formControlError} ${s.input}` : s.input}`} {...input} {...restProps} />\n        </FormControl>\n    );\n};\n\nexport const createField = (placeholder: string | null, validate: any[], name: string, component: any, type: string, id?: string, className?: any) => (\n    <Field placeholder={placeholder}\n           validate={validate}\n           name={name}\n           component={component}\n           type={type}\n           id={id}\n           className={className}\n    />)\n\n","export const requiredField = (value: string | undefined) => {\n    if(value) return undefined;\n    return \"Field is required\"\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string | undefined) => {\n    if(value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined\n}","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"Profile_Container__z1RE3\",\"Content\":\"Profile_Content__Ek7al\",\"Max_Profile_img\":\"Profile_Max_Profile_img__PKXmt\",\"Profile_img\":\"Profile_Profile_img__Jc0+-\"};","// extracted by mini-css-extract-plugin\nexport default {\"avatarContainer\":\"ProfileInfo_avatarContainer__0Ll-c\",\"avatar\":\"ProfileInfo_avatar__W+wcl\"};","import React, {useEffect, useState} from 'react';\n\ntype ProfileStatusPropsType = {\n    status: string,\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatus: React.FC<ProfileStatusPropsType> = ({ status, updateStatus }) => {\n\n    const [editMode, setEditMode] = useState(false);\n    const [currentStatus, setCurrentStatus] = useState(status);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        updateStatus(currentStatus);\n    }\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setCurrentStatus(e.currentTarget.value);\n    }\n\n    useEffect(() => {\n        setCurrentStatus(status);\n    }, [status]);\n\n        return (\n            <div>\n                {!editMode ?\n                    <div>\n                        <span\n                            onDoubleClick={activateEditMode}\n                        >{currentStatus || 'status is missing'}</span>\n                    </div>\n                    :\n                    <div>\n                        <input onChange={onStatusChange}\n                               autoFocus={true}\n                               onBlur={deactivateEditMode}\n                               value={currentStatus}\n                        />\n                    </div>\n                }\n            </div>\n        );\n}\n\nexport default ProfileStatus;","import React from 'react';\nimport {ProfileType} from \"../../../Redux/profilePage-reducer\";\nimport {CircularProgress} from \"@material-ui/core\";\nimport s from \"./ProfileInfo.module.css\"\nimport ProfileStatus from \"./ProfileStatus\";\nimport photo from '../../../assets/images/avatar.png'\n\ntype ProfileInfoPropsType = {\n    profile: null | ProfileType,\n    status: string,\n    updateStatus: (status: string) => void\n}\n\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status, updateStatus}) => {\n\n    if (!profile) {\n        return <CircularProgress/>\n    }\n\n    return (\n        <>\n            <h1>{profile.fullName}</h1>\n            <ProfileStatus status={status} updateStatus={updateStatus}/>\n            <p>about me: {!profile.aboutMe ? \"info is missing\" : profile.aboutMe}</p>\n            <p>looking for a job: {profile.lookingForAJob ? \"yes\" : \"no\"}</p>\n            <div className={s.avatarContainer}>\n                <img alt={'avatar'} className={s.avatar} src={!profile.photos.large ? photo : profile.photos.large}/>\n            </div>\n        </>\n    );\n};\n\nexport default ProfileInfo;","import React from 'react';\n\ntype PostPropsType = {\n    message: string,\n    likeCounter: number\n}\n\nconst Post: React.FC<PostPropsType> = (props) => {\n\n    const {message, likeCounter} = props\n\n    return (\n        <>\n            <img alt={'main photo'}/>\n            <div>\n                {message}\n            </div>\n            <div>\n                <span>like: </span>\n                {likeCounter}\n            </div>\n        </>\n    );\n};\n\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"MyPosts_main__woprv\",\"textareaAndPost\":\"MyPosts_textareaAndPost__tstPh\",\"textareaAndButton\":\"MyPosts_textareaAndButton__SHQMU\",\"textarea\":\"MyPosts_textarea__fbbO0\",\"button\":\"MyPosts_button__1H495\",\"postElement\":\"MyPosts_postElement__VYzQI\"};","import React from 'react';\nimport Post from \"./post/Post\";\nimport s from \"./MyPosts.module.css\";\nimport {MyPostPropsType} from \"./MyPostsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../../assets/formControls/FormsControls\";\n\nconst MyPosts: React.FC<MyPostPropsType> = React.memo((props) => {\n\n    const {addPostCallback, postData} = props\n\n    const postElement =\n        [...postData]\n            .reverse()\n            .map((e) => <Post key={e.id} message={e.message} likeCounter={e.likeCounter}/>)\n\n    const addPost = (values: { newPostText: string }) => {\n        addPostCallback(values.newPostText)\n    }\n\n    return (\n        <div className={s.main}>\n            <div className={s.textareaAndPost}>\n                <h3>My posts</h3>\n                <AddMessageFormRedux onSubmit={addPost}/>\n            </div>\n            <div>\n                {postElement}\n            </div>\n        </div>\n    );\n});\n\ntype FormDataType = {\n    newPostText: string\n}\n\nconst maxLength300 = maxLengthCreator(300)\n\nconst addNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field\n                component={Textarea}\n                name={'newPostText'}\n                placeholder={'Please, enter your post'}\n                validate={[requiredField, maxLength300]}\n            />\n            <button>add post</button>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: \"ProfileAddNewPostForm\"})(addNewPostForm)\n\nexport default MyPosts;","import React from 'react';\nimport MyPosts from \"./MyPosts\";\nimport {addPostAC, InitialStateType} from \"../../../Redux/profilePage-reducer\";\nimport {connect} from \"react-redux\";\nimport {AppRootStateType} from \"../../../Redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\ntype MapDispatchPropsType = {\n    addPostCallback: (valuePostText: string) => void\n}\n\nexport type MyPostPropsType = Omit<InitialStateType, 'status'> & MapDispatchPropsType\n\nconst mapStateToProps = (state: AppRootStateType) => {\n    return {\n        postData: state.profilePage.postData,\n        profile: state.profilePage.profile\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        addPostCallback: (newPostText: string) => {\n            dispatch(addPostAC(newPostText))\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\nexport default MyPostsContainer;","import React from 'react';\nimport './Profile.module.css';\nimport ProfileInfo from \"./profileInfo/ProfileInfo\";\nimport s from \"./Profile.module.css\"\nimport MyPostsContainer from \"./myPosts/MyPostsContainer\";\n\ntype ProfilePropsType = {\n    profile: null,\n    status: string,\n    updateStatus: (status: string) => void\n}\n\nexport const Profile = (props: ProfilePropsType) => {\n\n    return (\n        <div className={s.Container}>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer />\n        </div>\n    );\n};\n","import React from 'react';\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatusTC, getUserProfileTC, updateStatusTC} from \"../../Redux/profilePage-reducer\";\nimport {AppRootStateType} from \"../../Redux/redux-store\";\nimport {useParams} from \"react-router-dom\";\nimport {compose} from \"redux\";\n\ntype MapStatePropsType = {\n    profile: null,\n    status: string,\n    authorizedUserId: string | undefined,\n    isAuth: boolean\n}\n\ntype MapDispatchPropsType = {\n    getUserProfile: (userId: string | undefined) => void,\n    getStatus: (userId: string | undefined) => void,\n    updateStatus: (status: string) => void\n}\n\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\n\nconst ProfileContainer: React.FC<ProfilePropsType> = (props) => {\n    const {profile, getUserProfile, getStatus} = props\n    let {userId} = useParams<{ userId: string }>()\n\n    if (!userId) {\n        userId = props.authorizedUserId\n    }\n\n    getUserProfile(userId)\n    getStatus(userId)\n\n    return <Profile {...props}\n                    profile={profile}\n                    status={props.status}\n                    updateStatus={props.updateStatus}/>\n}\n\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\n\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.id,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile: getUserProfileTC, getStatus: getStatusTC, updateStatus: updateStatusTC}),\n    /*withAuthRedirect*/\n)(ProfileContainer)"],"names":["FormControl","children","meta","touched","error","hasError","className","s","Textarea","props","input","restProps","Input","createField","placeholder","validate","name","component","type","id","Field","requiredField","value","maxLengthCreator","maxLength","length","status","updateStatus","useState","editMode","setEditMode","currentStatus","setCurrentStatus","useEffect","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","profile","fullName","aboutMe","lookingForAJob","alt","src","photos","large","photo","CircularProgress","message","likeCounter","MyPosts","React","addPostCallback","postData","postElement","reverse","map","AddMessageFormRedux","onSubmit","values","newPostText","maxLength300","reduxForm","form","handleSubmit","connect","state","profilePage","dispatch","addPostAC","Profile","compose","authorizedUserId","auth","isAuth","getUserProfile","getUserProfileTC","getStatus","getStatusTC","updateStatusTC","userId","useParams"],"sourceRoot":""}